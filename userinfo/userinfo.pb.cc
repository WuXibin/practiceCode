// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "userinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AdServerCommon {

namespace {

const ::google::protobuf::Descriptor* USER_INFO_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USER_INFO_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* USER_INFO_S_USER_TAG_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USER_INFO_S_USER_TAG_S_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_userinfo_2eproto() {
  protobuf_AddDesc_userinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "userinfo.proto");
  GOOGLE_CHECK(file != NULL);
  USER_INFO_S_descriptor_ = file->message_type(0);
  static const int USER_INFO_S_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, m_user_auto_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, m_user_auto_serie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, m_user_auto_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, m_user_auto_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, m_user_auto_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, m_user_auto_sect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, m_user_auto_place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, m_user_group_),
  };
  USER_INFO_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      USER_INFO_S_descriptor_,
      USER_INFO_S::default_instance_,
      USER_INFO_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(USER_INFO_S));
  USER_INFO_S_USER_TAG_S_descriptor_ = USER_INFO_S_descriptor_->nested_type(0);
  static const int USER_INFO_S_USER_TAG_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S_USER_TAG_S, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S_USER_TAG_S, score_),
  };
  USER_INFO_S_USER_TAG_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      USER_INFO_S_USER_TAG_S_descriptor_,
      USER_INFO_S_USER_TAG_S::default_instance_,
      USER_INFO_S_USER_TAG_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S_USER_TAG_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO_S_USER_TAG_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(USER_INFO_S_USER_TAG_S));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_userinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    USER_INFO_S_descriptor_, &USER_INFO_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    USER_INFO_S_USER_TAG_S_descriptor_, &USER_INFO_S_USER_TAG_S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_userinfo_2eproto() {
  delete USER_INFO_S::default_instance_;
  delete USER_INFO_S_reflection_;
  delete USER_INFO_S_USER_TAG_S::default_instance_;
  delete USER_INFO_S_USER_TAG_S_reflection_;
}

void protobuf_AddDesc_userinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016userinfo.proto\022\016AdServerCommon\"\240\004\n\013USE"
    "R_INFO_S\022A\n\021m_user_auto_brand\030\001 \003(\0132&.Ad"
    "ServerCommon.USER_INFO_S.USER_TAG_S\022A\n\021m"
    "_user_auto_serie\030\002 \003(\0132&.AdServerCommon."
    "USER_INFO_S.USER_TAG_S\022A\n\021m_user_auto_le"
    "vel\030\003 \003(\0132&.AdServerCommon.USER_INFO_S.U"
    "SER_TAG_S\022A\n\021m_user_auto_price\030\004 \003(\0132&.A"
    "dServerCommon.USER_INFO_S.USER_TAG_S\022@\n\020"
    "m_user_auto_spec\030\005 \003(\0132&.AdServerCommon."
    "USER_INFO_S.USER_TAG_S\022@\n\020m_user_auto_se"
    "ct\030\006 \003(\0132&.AdServerCommon.USER_INFO_S.US"
    "ER_TAG_S\022A\n\021m_user_auto_place\030\007 \003(\0132&.Ad"
    "ServerCommon.USER_INFO_S.USER_TAG_S\022\024\n\014m"
    "_user_group\030\010 \001(\005\032(\n\nUSER_TAG_S\022\013\n\003tag\030\001"
    " \002(\005\022\r\n\005score\030\002 \002(\002", 579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "userinfo.proto", &protobuf_RegisterTypes);
  USER_INFO_S::default_instance_ = new USER_INFO_S();
  USER_INFO_S_USER_TAG_S::default_instance_ = new USER_INFO_S_USER_TAG_S();
  USER_INFO_S::default_instance_->InitAsDefaultInstance();
  USER_INFO_S_USER_TAG_S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_userinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_userinfo_2eproto {
  StaticDescriptorInitializer_userinfo_2eproto() {
    protobuf_AddDesc_userinfo_2eproto();
  }
} static_descriptor_initializer_userinfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int USER_INFO_S_USER_TAG_S::kTagFieldNumber;
const int USER_INFO_S_USER_TAG_S::kScoreFieldNumber;
#endif  // !_MSC_VER

USER_INFO_S_USER_TAG_S::USER_INFO_S_USER_TAG_S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void USER_INFO_S_USER_TAG_S::InitAsDefaultInstance() {
}

USER_INFO_S_USER_TAG_S::USER_INFO_S_USER_TAG_S(const USER_INFO_S_USER_TAG_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void USER_INFO_S_USER_TAG_S::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

USER_INFO_S_USER_TAG_S::~USER_INFO_S_USER_TAG_S() {
  SharedDtor();
}

void USER_INFO_S_USER_TAG_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void USER_INFO_S_USER_TAG_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USER_INFO_S_USER_TAG_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USER_INFO_S_USER_TAG_S_descriptor_;
}

const USER_INFO_S_USER_TAG_S& USER_INFO_S_USER_TAG_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

USER_INFO_S_USER_TAG_S* USER_INFO_S_USER_TAG_S::default_instance_ = NULL;

USER_INFO_S_USER_TAG_S* USER_INFO_S_USER_TAG_S::New() const {
  return new USER_INFO_S_USER_TAG_S;
}

void USER_INFO_S_USER_TAG_S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool USER_INFO_S_USER_TAG_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // required float score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void USER_INFO_S_USER_TAG_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // required float score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* USER_INFO_S_USER_TAG_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // required float score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int USER_INFO_S_USER_TAG_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // required float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USER_INFO_S_USER_TAG_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const USER_INFO_S_USER_TAG_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const USER_INFO_S_USER_TAG_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void USER_INFO_S_USER_TAG_S::MergeFrom(const USER_INFO_S_USER_TAG_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void USER_INFO_S_USER_TAG_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USER_INFO_S_USER_TAG_S::CopyFrom(const USER_INFO_S_USER_TAG_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USER_INFO_S_USER_TAG_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void USER_INFO_S_USER_TAG_S::Swap(USER_INFO_S_USER_TAG_S* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata USER_INFO_S_USER_TAG_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USER_INFO_S_USER_TAG_S_descriptor_;
  metadata.reflection = USER_INFO_S_USER_TAG_S_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int USER_INFO_S::kMUserAutoBrandFieldNumber;
const int USER_INFO_S::kMUserAutoSerieFieldNumber;
const int USER_INFO_S::kMUserAutoLevelFieldNumber;
const int USER_INFO_S::kMUserAutoPriceFieldNumber;
const int USER_INFO_S::kMUserAutoSpecFieldNumber;
const int USER_INFO_S::kMUserAutoSectFieldNumber;
const int USER_INFO_S::kMUserAutoPlaceFieldNumber;
const int USER_INFO_S::kMUserGroupFieldNumber;
#endif  // !_MSC_VER

USER_INFO_S::USER_INFO_S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void USER_INFO_S::InitAsDefaultInstance() {
}

USER_INFO_S::USER_INFO_S(const USER_INFO_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void USER_INFO_S::SharedCtor() {
  _cached_size_ = 0;
  m_user_group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

USER_INFO_S::~USER_INFO_S() {
  SharedDtor();
}

void USER_INFO_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void USER_INFO_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USER_INFO_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USER_INFO_S_descriptor_;
}

const USER_INFO_S& USER_INFO_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

USER_INFO_S* USER_INFO_S::default_instance_ = NULL;

USER_INFO_S* USER_INFO_S::New() const {
  return new USER_INFO_S;
}

void USER_INFO_S::Clear() {
  if (_has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    m_user_group_ = 0;
  }
  m_user_auto_brand_.Clear();
  m_user_auto_serie_.Clear();
  m_user_auto_level_.Clear();
  m_user_auto_price_.Clear();
  m_user_auto_spec_.Clear();
  m_user_auto_sect_.Clear();
  m_user_auto_place_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool USER_INFO_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_brand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_user_auto_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_user_auto_brand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_user_auto_brand;
        if (input->ExpectTag(18)) goto parse_m_user_auto_serie;
        break;
      }

      // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_serie = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_user_auto_serie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_user_auto_serie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_user_auto_serie;
        if (input->ExpectTag(26)) goto parse_m_user_auto_level;
        break;
      }

      // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_user_auto_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_user_auto_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_user_auto_level;
        if (input->ExpectTag(34)) goto parse_m_user_auto_price;
        break;
      }

      // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_user_auto_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_user_auto_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_user_auto_price;
        if (input->ExpectTag(42)) goto parse_m_user_auto_spec;
        break;
      }

      // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_spec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_user_auto_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_user_auto_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_user_auto_spec;
        if (input->ExpectTag(50)) goto parse_m_user_auto_sect;
        break;
      }

      // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_sect = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_user_auto_sect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_user_auto_sect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_user_auto_sect;
        if (input->ExpectTag(58)) goto parse_m_user_auto_place;
        break;
      }

      // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_place = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_user_auto_place:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_user_auto_place()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_user_auto_place;
        if (input->ExpectTag(64)) goto parse_m_user_group;
        break;
      }

      // optional int32 m_user_group = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_user_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_user_group_)));
          set_has_m_user_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void USER_INFO_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_brand = 1;
  for (int i = 0; i < this->m_user_auto_brand_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_user_auto_brand(i), output);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_serie = 2;
  for (int i = 0; i < this->m_user_auto_serie_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_user_auto_serie(i), output);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_level = 3;
  for (int i = 0; i < this->m_user_auto_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_user_auto_level(i), output);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_price = 4;
  for (int i = 0; i < this->m_user_auto_price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_user_auto_price(i), output);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_spec = 5;
  for (int i = 0; i < this->m_user_auto_spec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_user_auto_spec(i), output);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_sect = 6;
  for (int i = 0; i < this->m_user_auto_sect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_user_auto_sect(i), output);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_place = 7;
  for (int i = 0; i < this->m_user_auto_place_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_user_auto_place(i), output);
  }

  // optional int32 m_user_group = 8;
  if (has_m_user_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_user_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* USER_INFO_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_brand = 1;
  for (int i = 0; i < this->m_user_auto_brand_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_user_auto_brand(i), target);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_serie = 2;
  for (int i = 0; i < this->m_user_auto_serie_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_user_auto_serie(i), target);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_level = 3;
  for (int i = 0; i < this->m_user_auto_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_user_auto_level(i), target);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_price = 4;
  for (int i = 0; i < this->m_user_auto_price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_user_auto_price(i), target);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_spec = 5;
  for (int i = 0; i < this->m_user_auto_spec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_user_auto_spec(i), target);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_sect = 6;
  for (int i = 0; i < this->m_user_auto_sect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_user_auto_sect(i), target);
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_place = 7;
  for (int i = 0; i < this->m_user_auto_place_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_user_auto_place(i), target);
  }

  // optional int32 m_user_group = 8;
  if (has_m_user_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_user_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int USER_INFO_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    // optional int32 m_user_group = 8;
    if (has_m_user_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_user_group());
    }

  }
  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_brand = 1;
  total_size += 1 * this->m_user_auto_brand_size();
  for (int i = 0; i < this->m_user_auto_brand_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_user_auto_brand(i));
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_serie = 2;
  total_size += 1 * this->m_user_auto_serie_size();
  for (int i = 0; i < this->m_user_auto_serie_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_user_auto_serie(i));
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_level = 3;
  total_size += 1 * this->m_user_auto_level_size();
  for (int i = 0; i < this->m_user_auto_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_user_auto_level(i));
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_price = 4;
  total_size += 1 * this->m_user_auto_price_size();
  for (int i = 0; i < this->m_user_auto_price_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_user_auto_price(i));
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_spec = 5;
  total_size += 1 * this->m_user_auto_spec_size();
  for (int i = 0; i < this->m_user_auto_spec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_user_auto_spec(i));
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_sect = 6;
  total_size += 1 * this->m_user_auto_sect_size();
  for (int i = 0; i < this->m_user_auto_sect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_user_auto_sect(i));
  }

  // repeated .AdServerCommon.USER_INFO_S.USER_TAG_S m_user_auto_place = 7;
  total_size += 1 * this->m_user_auto_place_size();
  for (int i = 0; i < this->m_user_auto_place_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_user_auto_place(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USER_INFO_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const USER_INFO_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const USER_INFO_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void USER_INFO_S::MergeFrom(const USER_INFO_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_user_auto_brand_.MergeFrom(from.m_user_auto_brand_);
  m_user_auto_serie_.MergeFrom(from.m_user_auto_serie_);
  m_user_auto_level_.MergeFrom(from.m_user_auto_level_);
  m_user_auto_price_.MergeFrom(from.m_user_auto_price_);
  m_user_auto_spec_.MergeFrom(from.m_user_auto_spec_);
  m_user_auto_sect_.MergeFrom(from.m_user_auto_sect_);
  m_user_auto_place_.MergeFrom(from.m_user_auto_place_);
  if (from._has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    if (from.has_m_user_group()) {
      set_m_user_group(from.m_user_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void USER_INFO_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USER_INFO_S::CopyFrom(const USER_INFO_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USER_INFO_S::IsInitialized() const {

  for (int i = 0; i < m_user_auto_brand_size(); i++) {
    if (!this->m_user_auto_brand(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_user_auto_serie_size(); i++) {
    if (!this->m_user_auto_serie(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_user_auto_level_size(); i++) {
    if (!this->m_user_auto_level(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_user_auto_price_size(); i++) {
    if (!this->m_user_auto_price(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_user_auto_spec_size(); i++) {
    if (!this->m_user_auto_spec(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_user_auto_sect_size(); i++) {
    if (!this->m_user_auto_sect(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_user_auto_place_size(); i++) {
    if (!this->m_user_auto_place(i).IsInitialized()) return false;
  }
  return true;
}

void USER_INFO_S::Swap(USER_INFO_S* other) {
  if (other != this) {
    m_user_auto_brand_.Swap(&other->m_user_auto_brand_);
    m_user_auto_serie_.Swap(&other->m_user_auto_serie_);
    m_user_auto_level_.Swap(&other->m_user_auto_level_);
    m_user_auto_price_.Swap(&other->m_user_auto_price_);
    m_user_auto_spec_.Swap(&other->m_user_auto_spec_);
    m_user_auto_sect_.Swap(&other->m_user_auto_sect_);
    m_user_auto_place_.Swap(&other->m_user_auto_place_);
    std::swap(m_user_group_, other->m_user_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata USER_INFO_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USER_INFO_S_descriptor_;
  metadata.reflection = USER_INFO_S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AdServerCommon

// @@protoc_insertion_point(global_scope)
