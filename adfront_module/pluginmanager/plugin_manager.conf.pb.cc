// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin_manager.conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plugin_manager.conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sharelib {

namespace {

const ::google::protobuf::Descriptor* PluginConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginManagerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginManagerConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plugin_5fmanager_2econf_2eproto() {
  protobuf_AddDesc_plugin_5fmanager_2econf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plugin_manager.conf.proto");
  GOOGLE_CHECK(file != NULL);
  PluginConf_descriptor_ = file->message_type(0);
  static const int PluginConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginConf, so_home_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginConf, so_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginConf, conf_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginConf, key_val_list_),
  };
  PluginConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginConf_descriptor_,
      PluginConf::default_instance_,
      PluginConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginConf));
  PluginManagerConf_descriptor_ = file->message_type(1);
  static const int PluginManagerConf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginManagerConf, plugin_conf_list_),
  };
  PluginManagerConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginManagerConf_descriptor_,
      PluginManagerConf::default_instance_,
      PluginManagerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginManagerConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginManagerConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginManagerConf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plugin_5fmanager_2econf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginConf_descriptor_, &PluginConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginManagerConf_descriptor_, &PluginManagerConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plugin_5fmanager_2econf_2eproto() {
  delete PluginConf::default_instance_;
  delete PluginConf_reflection_;
  delete PluginManagerConf::default_instance_;
  delete PluginManagerConf_reflection_;
}

void protobuf_AddDesc_plugin_5fmanager_2econf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031plugin_manager.conf.proto\022\010sharelib\"j\n"
    "\nPluginConf\022\014\n\004name\030\001 \003(\t\022\024\n\014so_home_pat"
    "h\030\002 \002(\t\022\017\n\007so_name\030\003 \002(\t\022\021\n\tconf_path\030\004 "
    "\002(\t\022\024\n\014key_val_list\030\005 \003(\t\"C\n\021PluginManag"
    "erConf\022.\n\020plugin_conf_list\030\001 \003(\0132\024.share"
    "lib.PluginConf", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plugin_manager.conf.proto", &protobuf_RegisterTypes);
  PluginConf::default_instance_ = new PluginConf();
  PluginManagerConf::default_instance_ = new PluginManagerConf();
  PluginConf::default_instance_->InitAsDefaultInstance();
  PluginManagerConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plugin_5fmanager_2econf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plugin_5fmanager_2econf_2eproto {
  StaticDescriptorInitializer_plugin_5fmanager_2econf_2eproto() {
    protobuf_AddDesc_plugin_5fmanager_2econf_2eproto();
  }
} static_descriptor_initializer_plugin_5fmanager_2econf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PluginConf::kNameFieldNumber;
const int PluginConf::kSoHomePathFieldNumber;
const int PluginConf::kSoNameFieldNumber;
const int PluginConf::kConfPathFieldNumber;
const int PluginConf::kKeyValListFieldNumber;
#endif  // !_MSC_VER

PluginConf::PluginConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PluginConf::InitAsDefaultInstance() {
}

PluginConf::PluginConf(const PluginConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PluginConf::SharedCtor() {
  _cached_size_ = 0;
  so_home_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  so_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conf_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginConf::~PluginConf() {
  SharedDtor();
}

void PluginConf::SharedDtor() {
  if (so_home_path_ != &::google::protobuf::internal::kEmptyString) {
    delete so_home_path_;
  }
  if (so_name_ != &::google::protobuf::internal::kEmptyString) {
    delete so_name_;
  }
  if (conf_path_ != &::google::protobuf::internal::kEmptyString) {
    delete conf_path_;
  }
  if (this != default_instance_) {
  }
}

void PluginConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginConf_descriptor_;
}

const PluginConf& PluginConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_5fmanager_2econf_2eproto();
  return *default_instance_;
}

PluginConf* PluginConf::default_instance_ = NULL;

PluginConf* PluginConf::New() const {
  return new PluginConf;
}

void PluginConf::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_so_home_path()) {
      if (so_home_path_ != &::google::protobuf::internal::kEmptyString) {
        so_home_path_->clear();
      }
    }
    if (has_so_name()) {
      if (so_name_ != &::google::protobuf::internal::kEmptyString) {
        so_name_->clear();
      }
    }
    if (has_conf_path()) {
      if (conf_path_ != &::google::protobuf::internal::kEmptyString) {
        conf_path_->clear();
      }
    }
  }
  name_.Clear();
  key_val_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectTag(18)) goto parse_so_home_path;
        break;
      }

      // required string so_home_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_so_home_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_so_home_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->so_home_path().data(), this->so_home_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_so_name;
        break;
      }

      // required string so_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_so_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_so_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->so_name().data(), this->so_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_conf_path;
        break;
      }

      // required string conf_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conf_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conf_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conf_path().data(), this->conf_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key_val_list;
        break;
      }

      // repeated string key_val_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_val_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key_val_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_val_list(this->key_val_list_size() - 1).data(),
            this->key_val_list(this->key_val_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key_val_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PluginConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  // required string so_home_path = 2;
  if (has_so_home_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->so_home_path().data(), this->so_home_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->so_home_path(), output);
  }

  // required string so_name = 3;
  if (has_so_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->so_name().data(), this->so_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->so_name(), output);
  }

  // required string conf_path = 4;
  if (has_conf_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conf_path().data(), this->conf_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->conf_path(), output);
  }

  // repeated string key_val_list = 5;
  for (int i = 0; i < this->key_val_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->key_val_list(i).data(), this->key_val_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->key_val_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PluginConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  // required string so_home_path = 2;
  if (has_so_home_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->so_home_path().data(), this->so_home_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->so_home_path(), target);
  }

  // required string so_name = 3;
  if (has_so_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->so_name().data(), this->so_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->so_name(), target);
  }

  // required string conf_path = 4;
  if (has_conf_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conf_path().data(), this->conf_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->conf_path(), target);
  }

  // repeated string key_val_list = 5;
  for (int i = 0; i < this->key_val_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_val_list(i).data(), this->key_val_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->key_val_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PluginConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string so_home_path = 2;
    if (has_so_home_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->so_home_path());
    }

    // required string so_name = 3;
    if (has_so_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->so_name());
    }

    // required string conf_path = 4;
    if (has_conf_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conf_path());
    }

  }
  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated string key_val_list = 5;
  total_size += 1 * this->key_val_list_size();
  for (int i = 0; i < this->key_val_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key_val_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginConf::MergeFrom(const PluginConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  key_val_list_.MergeFrom(from.key_val_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_so_home_path()) {
      set_so_home_path(from.so_home_path());
    }
    if (from.has_so_name()) {
      set_so_name(from.so_name());
    }
    if (from.has_conf_path()) {
      set_conf_path(from.conf_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginConf::CopyFrom(const PluginConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void PluginConf::Swap(PluginConf* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(so_home_path_, other->so_home_path_);
    std::swap(so_name_, other->so_name_);
    std::swap(conf_path_, other->conf_path_);
    key_val_list_.Swap(&other->key_val_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginConf_descriptor_;
  metadata.reflection = PluginConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginManagerConf::kPluginConfListFieldNumber;
#endif  // !_MSC_VER

PluginManagerConf::PluginManagerConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PluginManagerConf::InitAsDefaultInstance() {
}

PluginManagerConf::PluginManagerConf(const PluginManagerConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PluginManagerConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginManagerConf::~PluginManagerConf() {
  SharedDtor();
}

void PluginManagerConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PluginManagerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginManagerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginManagerConf_descriptor_;
}

const PluginManagerConf& PluginManagerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_5fmanager_2econf_2eproto();
  return *default_instance_;
}

PluginManagerConf* PluginManagerConf::default_instance_ = NULL;

PluginManagerConf* PluginManagerConf::New() const {
  return new PluginManagerConf;
}

void PluginManagerConf::Clear() {
  plugin_conf_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginManagerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sharelib.PluginConf plugin_conf_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plugin_conf_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plugin_conf_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_plugin_conf_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PluginManagerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sharelib.PluginConf plugin_conf_list = 1;
  for (int i = 0; i < this->plugin_conf_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin_conf_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PluginManagerConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sharelib.PluginConf plugin_conf_list = 1;
  for (int i = 0; i < this->plugin_conf_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin_conf_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PluginManagerConf::ByteSize() const {
  int total_size = 0;

  // repeated .sharelib.PluginConf plugin_conf_list = 1;
  total_size += 1 * this->plugin_conf_list_size();
  for (int i = 0; i < this->plugin_conf_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plugin_conf_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginManagerConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginManagerConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginManagerConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginManagerConf::MergeFrom(const PluginManagerConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  plugin_conf_list_.MergeFrom(from.plugin_conf_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginManagerConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginManagerConf::CopyFrom(const PluginManagerConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginManagerConf::IsInitialized() const {

  for (int i = 0; i < plugin_conf_list_size(); i++) {
    if (!this->plugin_conf_list(i).IsInitialized()) return false;
  }
  return true;
}

void PluginManagerConf::Swap(PluginManagerConf* other) {
  if (other != this) {
    plugin_conf_list_.Swap(&other->plugin_conf_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginManagerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginManagerConf_descriptor_;
  metadata.reflection = PluginManagerConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sharelib

// @@protoc_insertion_point(global_scope)
