// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin_manager.conf.proto

#ifndef PROTOBUF_plugin_5fmanager_2econf_2eproto__INCLUDED
#define PROTOBUF_plugin_5fmanager_2econf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sharelib {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_plugin_5fmanager_2econf_2eproto();
void protobuf_AssignDesc_plugin_5fmanager_2econf_2eproto();
void protobuf_ShutdownFile_plugin_5fmanager_2econf_2eproto();

class PluginConf;
class PluginManagerConf;

// ===================================================================

class PluginConf : public ::google::protobuf::Message {
 public:
  PluginConf();
  virtual ~PluginConf();

  PluginConf(const PluginConf& from);

  inline PluginConf& operator=(const PluginConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginConf& default_instance();

  void Swap(PluginConf* other);

  // implements Message ----------------------------------------------

  PluginConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PluginConf& from);
  void MergeFrom(const PluginConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // required string so_home_path = 2;
  inline bool has_so_home_path() const;
  inline void clear_so_home_path();
  static const int kSoHomePathFieldNumber = 2;
  inline const ::std::string& so_home_path() const;
  inline void set_so_home_path(const ::std::string& value);
  inline void set_so_home_path(const char* value);
  inline void set_so_home_path(const char* value, size_t size);
  inline ::std::string* mutable_so_home_path();
  inline ::std::string* release_so_home_path();
  inline void set_allocated_so_home_path(::std::string* so_home_path);

  // required string so_name = 3;
  inline bool has_so_name() const;
  inline void clear_so_name();
  static const int kSoNameFieldNumber = 3;
  inline const ::std::string& so_name() const;
  inline void set_so_name(const ::std::string& value);
  inline void set_so_name(const char* value);
  inline void set_so_name(const char* value, size_t size);
  inline ::std::string* mutable_so_name();
  inline ::std::string* release_so_name();
  inline void set_allocated_so_name(::std::string* so_name);

  // required string conf_path = 4;
  inline bool has_conf_path() const;
  inline void clear_conf_path();
  static const int kConfPathFieldNumber = 4;
  inline const ::std::string& conf_path() const;
  inline void set_conf_path(const ::std::string& value);
  inline void set_conf_path(const char* value);
  inline void set_conf_path(const char* value, size_t size);
  inline ::std::string* mutable_conf_path();
  inline ::std::string* release_conf_path();
  inline void set_allocated_conf_path(::std::string* conf_path);

  // repeated string key_val_list = 5;
  inline int key_val_list_size() const;
  inline void clear_key_val_list();
  static const int kKeyValListFieldNumber = 5;
  inline const ::std::string& key_val_list(int index) const;
  inline ::std::string* mutable_key_val_list(int index);
  inline void set_key_val_list(int index, const ::std::string& value);
  inline void set_key_val_list(int index, const char* value);
  inline void set_key_val_list(int index, const char* value, size_t size);
  inline ::std::string* add_key_val_list();
  inline void add_key_val_list(const ::std::string& value);
  inline void add_key_val_list(const char* value);
  inline void add_key_val_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key_val_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key_val_list();

  // @@protoc_insertion_point(class_scope:sharelib.PluginConf)
 private:
  inline void set_has_so_home_path();
  inline void clear_has_so_home_path();
  inline void set_has_so_name();
  inline void clear_has_so_name();
  inline void set_has_conf_path();
  inline void clear_has_conf_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::std::string* so_home_path_;
  ::std::string* so_name_;
  ::std::string* conf_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_val_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_plugin_5fmanager_2econf_2eproto();
  friend void protobuf_AssignDesc_plugin_5fmanager_2econf_2eproto();
  friend void protobuf_ShutdownFile_plugin_5fmanager_2econf_2eproto();

  void InitAsDefaultInstance();
  static PluginConf* default_instance_;
};
// -------------------------------------------------------------------

class PluginManagerConf : public ::google::protobuf::Message {
 public:
  PluginManagerConf();
  virtual ~PluginManagerConf();

  PluginManagerConf(const PluginManagerConf& from);

  inline PluginManagerConf& operator=(const PluginManagerConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginManagerConf& default_instance();

  void Swap(PluginManagerConf* other);

  // implements Message ----------------------------------------------

  PluginManagerConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PluginManagerConf& from);
  void MergeFrom(const PluginManagerConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sharelib.PluginConf plugin_conf_list = 1;
  inline int plugin_conf_list_size() const;
  inline void clear_plugin_conf_list();
  static const int kPluginConfListFieldNumber = 1;
  inline const ::sharelib::PluginConf& plugin_conf_list(int index) const;
  inline ::sharelib::PluginConf* mutable_plugin_conf_list(int index);
  inline ::sharelib::PluginConf* add_plugin_conf_list();
  inline const ::google::protobuf::RepeatedPtrField< ::sharelib::PluginConf >&
      plugin_conf_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::sharelib::PluginConf >*
      mutable_plugin_conf_list();

  // @@protoc_insertion_point(class_scope:sharelib.PluginManagerConf)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sharelib::PluginConf > plugin_conf_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_plugin_5fmanager_2econf_2eproto();
  friend void protobuf_AssignDesc_plugin_5fmanager_2econf_2eproto();
  friend void protobuf_ShutdownFile_plugin_5fmanager_2econf_2eproto();

  void InitAsDefaultInstance();
  static PluginManagerConf* default_instance_;
};
// ===================================================================


// ===================================================================

// PluginConf

// repeated string name = 1;
inline int PluginConf::name_size() const {
  return name_.size();
}
inline void PluginConf::clear_name() {
  name_.Clear();
}
inline const ::std::string& PluginConf::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* PluginConf::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void PluginConf::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void PluginConf::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void PluginConf::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginConf::add_name() {
  return name_.Add();
}
inline void PluginConf::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void PluginConf::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void PluginConf::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PluginConf::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PluginConf::mutable_name() {
  return &name_;
}

// required string so_home_path = 2;
inline bool PluginConf::has_so_home_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PluginConf::set_has_so_home_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PluginConf::clear_has_so_home_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PluginConf::clear_so_home_path() {
  if (so_home_path_ != &::google::protobuf::internal::kEmptyString) {
    so_home_path_->clear();
  }
  clear_has_so_home_path();
}
inline const ::std::string& PluginConf::so_home_path() const {
  return *so_home_path_;
}
inline void PluginConf::set_so_home_path(const ::std::string& value) {
  set_has_so_home_path();
  if (so_home_path_ == &::google::protobuf::internal::kEmptyString) {
    so_home_path_ = new ::std::string;
  }
  so_home_path_->assign(value);
}
inline void PluginConf::set_so_home_path(const char* value) {
  set_has_so_home_path();
  if (so_home_path_ == &::google::protobuf::internal::kEmptyString) {
    so_home_path_ = new ::std::string;
  }
  so_home_path_->assign(value);
}
inline void PluginConf::set_so_home_path(const char* value, size_t size) {
  set_has_so_home_path();
  if (so_home_path_ == &::google::protobuf::internal::kEmptyString) {
    so_home_path_ = new ::std::string;
  }
  so_home_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginConf::mutable_so_home_path() {
  set_has_so_home_path();
  if (so_home_path_ == &::google::protobuf::internal::kEmptyString) {
    so_home_path_ = new ::std::string;
  }
  return so_home_path_;
}
inline ::std::string* PluginConf::release_so_home_path() {
  clear_has_so_home_path();
  if (so_home_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = so_home_path_;
    so_home_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PluginConf::set_allocated_so_home_path(::std::string* so_home_path) {
  if (so_home_path_ != &::google::protobuf::internal::kEmptyString) {
    delete so_home_path_;
  }
  if (so_home_path) {
    set_has_so_home_path();
    so_home_path_ = so_home_path;
  } else {
    clear_has_so_home_path();
    so_home_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string so_name = 3;
inline bool PluginConf::has_so_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PluginConf::set_has_so_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PluginConf::clear_has_so_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PluginConf::clear_so_name() {
  if (so_name_ != &::google::protobuf::internal::kEmptyString) {
    so_name_->clear();
  }
  clear_has_so_name();
}
inline const ::std::string& PluginConf::so_name() const {
  return *so_name_;
}
inline void PluginConf::set_so_name(const ::std::string& value) {
  set_has_so_name();
  if (so_name_ == &::google::protobuf::internal::kEmptyString) {
    so_name_ = new ::std::string;
  }
  so_name_->assign(value);
}
inline void PluginConf::set_so_name(const char* value) {
  set_has_so_name();
  if (so_name_ == &::google::protobuf::internal::kEmptyString) {
    so_name_ = new ::std::string;
  }
  so_name_->assign(value);
}
inline void PluginConf::set_so_name(const char* value, size_t size) {
  set_has_so_name();
  if (so_name_ == &::google::protobuf::internal::kEmptyString) {
    so_name_ = new ::std::string;
  }
  so_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginConf::mutable_so_name() {
  set_has_so_name();
  if (so_name_ == &::google::protobuf::internal::kEmptyString) {
    so_name_ = new ::std::string;
  }
  return so_name_;
}
inline ::std::string* PluginConf::release_so_name() {
  clear_has_so_name();
  if (so_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = so_name_;
    so_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PluginConf::set_allocated_so_name(::std::string* so_name) {
  if (so_name_ != &::google::protobuf::internal::kEmptyString) {
    delete so_name_;
  }
  if (so_name) {
    set_has_so_name();
    so_name_ = so_name;
  } else {
    clear_has_so_name();
    so_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string conf_path = 4;
inline bool PluginConf::has_conf_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PluginConf::set_has_conf_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PluginConf::clear_has_conf_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PluginConf::clear_conf_path() {
  if (conf_path_ != &::google::protobuf::internal::kEmptyString) {
    conf_path_->clear();
  }
  clear_has_conf_path();
}
inline const ::std::string& PluginConf::conf_path() const {
  return *conf_path_;
}
inline void PluginConf::set_conf_path(const ::std::string& value) {
  set_has_conf_path();
  if (conf_path_ == &::google::protobuf::internal::kEmptyString) {
    conf_path_ = new ::std::string;
  }
  conf_path_->assign(value);
}
inline void PluginConf::set_conf_path(const char* value) {
  set_has_conf_path();
  if (conf_path_ == &::google::protobuf::internal::kEmptyString) {
    conf_path_ = new ::std::string;
  }
  conf_path_->assign(value);
}
inline void PluginConf::set_conf_path(const char* value, size_t size) {
  set_has_conf_path();
  if (conf_path_ == &::google::protobuf::internal::kEmptyString) {
    conf_path_ = new ::std::string;
  }
  conf_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginConf::mutable_conf_path() {
  set_has_conf_path();
  if (conf_path_ == &::google::protobuf::internal::kEmptyString) {
    conf_path_ = new ::std::string;
  }
  return conf_path_;
}
inline ::std::string* PluginConf::release_conf_path() {
  clear_has_conf_path();
  if (conf_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = conf_path_;
    conf_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PluginConf::set_allocated_conf_path(::std::string* conf_path) {
  if (conf_path_ != &::google::protobuf::internal::kEmptyString) {
    delete conf_path_;
  }
  if (conf_path) {
    set_has_conf_path();
    conf_path_ = conf_path;
  } else {
    clear_has_conf_path();
    conf_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string key_val_list = 5;
inline int PluginConf::key_val_list_size() const {
  return key_val_list_.size();
}
inline void PluginConf::clear_key_val_list() {
  key_val_list_.Clear();
}
inline const ::std::string& PluginConf::key_val_list(int index) const {
  return key_val_list_.Get(index);
}
inline ::std::string* PluginConf::mutable_key_val_list(int index) {
  return key_val_list_.Mutable(index);
}
inline void PluginConf::set_key_val_list(int index, const ::std::string& value) {
  key_val_list_.Mutable(index)->assign(value);
}
inline void PluginConf::set_key_val_list(int index, const char* value) {
  key_val_list_.Mutable(index)->assign(value);
}
inline void PluginConf::set_key_val_list(int index, const char* value, size_t size) {
  key_val_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginConf::add_key_val_list() {
  return key_val_list_.Add();
}
inline void PluginConf::add_key_val_list(const ::std::string& value) {
  key_val_list_.Add()->assign(value);
}
inline void PluginConf::add_key_val_list(const char* value) {
  key_val_list_.Add()->assign(value);
}
inline void PluginConf::add_key_val_list(const char* value, size_t size) {
  key_val_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PluginConf::key_val_list() const {
  return key_val_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PluginConf::mutable_key_val_list() {
  return &key_val_list_;
}

// -------------------------------------------------------------------

// PluginManagerConf

// repeated .sharelib.PluginConf plugin_conf_list = 1;
inline int PluginManagerConf::plugin_conf_list_size() const {
  return plugin_conf_list_.size();
}
inline void PluginManagerConf::clear_plugin_conf_list() {
  plugin_conf_list_.Clear();
}
inline const ::sharelib::PluginConf& PluginManagerConf::plugin_conf_list(int index) const {
  return plugin_conf_list_.Get(index);
}
inline ::sharelib::PluginConf* PluginManagerConf::mutable_plugin_conf_list(int index) {
  return plugin_conf_list_.Mutable(index);
}
inline ::sharelib::PluginConf* PluginManagerConf::add_plugin_conf_list() {
  return plugin_conf_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sharelib::PluginConf >&
PluginManagerConf::plugin_conf_list() const {
  return plugin_conf_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::sharelib::PluginConf >*
PluginManagerConf::mutable_plugin_conf_list() {
  return &plugin_conf_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sharelib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plugin_5fmanager_2econf_2eproto__INCLUDED
